{"version":3,"sources":["position.ts","util.ts","tileRenderer.ts","Tile.tsx","Board.tsx","map.ts","GameProvider.tsx","LevelSelect.tsx","transitionStyles.ts","SolveBackground.tsx","FullScreenCenter.tsx","Finish.tsx","Game.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["Direction","rndInt","max","Math","floor","random","rndArrayElement","array","length","wrap","number","getPosition","index","width","x","y","isSame","posA","posB","addPositionsWrap","height","addPositions","getExits","point","prev","next","map","pos","subPositions","West","East","North","South","toDirection","rotateExits","exits","rota","exit","dirVectors","roundC","corners","cx","cy","colors","exitsToPath","c1","c2","strokePathString","color","tileStyle","backgroundSize","strokeWidth","transition","tile","strokes","rotation","onClick","css","pointerEvents","transform","stroke","d","fill","boardStyle","tileSize","isSolved","display","gridTemplateColumns","gridTemplateRows","background","padding","borderRadius","opacity","rotateTile","viewBox","Tile","mapPosToPosStroke","posMap","makePath","isDone","steps","minLength","min","isPossible","currentStep","candidates","filter","every","step","push","makeMap","randomRotate","paths","Array","from","_","path","makeDemoMap","defaultState","introMap","isStarted","showBackground","defaultContext","start","reset","GameContext","React","createContext","gameReducer","state","action","type","payload","totalSize","document","body","offsetHeight","offsetWidth","neighbor","find","other","some","nbStroke","includes","checkSolved","randomTile","children","useReducer","dispatch","useEffect","id","window","setTimeout","clearTimeout","setInterval","clearInterval","Provider","value","containerStyle","backgroundColor","maxWidth","flexDirection","flexWrap","justifyContent","alignItems","buttonStyle","border","fontWeight","fontSize","margin","boxShadow","cursor","sizes","props","useContext","Fragment","key","scaleInTransition","moveXAni","size","keyframes","backgroundPositionX","moveYAni","backgroundPositionY","rendered","curves","svgStrokes","join","svgMap","bg","replace","position","top","left","backgroundPosition","clipPath","animation","style","backgroundImage","glow","textShadow","animals","boardSize","animal","useRef","marginTop","current","CSSTransition","in","timeout","enter","unmountOnExit","classNames","SolveBackground","mountOnEnter","FullScreenCenter","Board","Finish","LevelSelect","globalStyle","minHeight","overflow","styles","GameProvider","Game","Boolean","location","hostname","match","ReactDOM","render","App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b01c9abc.chunk.js","sourcesContent":["import {wrap} from './util';\n\nexport enum Direction {\n  North,\n  East,\n  South,\n  West,\n}\n\nexport interface Position {\n  x: number;\n  y: number;\n}\n\nexport type Exits = Direction[];\n\nexport interface Stroke {\n  color: number;\n  exits: Exits;\n}\n\nexport interface PosStroke extends Position {\n  stroke: Stroke;\n}\n\nexport interface TileContent {\n  rotation: number;\n  strokes: Stroke[];\n}\n\nexport type Tile = Position & TileContent;\n\nexport type Map = Tile[];\n\nexport const getPosition = (index: number, width: number): Position => ({\n  x: index % width,\n  y: Math.floor(index / width),\n});\n\nexport const isSame = (posA: Position, posB: Position) => posA.x === posB.x && posA.y === posB.y;\n\nexport const addPositions = (posA: Position, posB: Position): Position => ({x: posA.x + posB.x, y: posA.y + posB.y});\n\nexport const addPositionsWrap = (posA: Position, posB: Position, width: number, height: number): Position => {\n  const {x, y} = addPositions(posA, posB);\n  return {x: wrap(x, width), y: wrap(y, height)};\n};\n\nexport const subPositions = (posA: Position, posB: Position): Position => ({x: posA.x - posB.x, y: posA.y - posB.y});\n\nexport const isInBounds = ({x, y}: Position, width: number, height: number) =>\n  x < width && x >= 0 && y < height && y >= 0;\n\nexport const toDirection = (posA: Position, posB: Position): Direction => {\n  const {x, y} = subPositions(posA, posB);\n  if (x === -1 || x > 1) {\n    return Direction.West;\n  }\n  if (x === 1 || x < -1) {\n    return Direction.East;\n  }\n  if (y === -1 || y > 1) {\n    return Direction.North;\n  }\n  return Direction.South;\n};\n\nexport const getExits = (point: Position, prev: Position, next: Position) =>\n  [prev, next].map(pos => toDirection(pos, point)) as Exits;\n\nexport const hasNorth = (exits: Exits) => exits.includes(Direction.North);\nexport const hasEast = (exits: Exits) => exits.includes(Direction.East);\nexport const hasSouth = (exits: Exits) => exits.includes(Direction.South);\nexport const hasWest = (exits: Exits) => exits.includes(Direction.West);\nexport const hasNorthSouth = (exits: Exits) => hasNorth(exits) && hasSouth(exits);\nexport const hasEastWest = (exits: Exits) => hasEast(exits) && hasWest(exits);\n\nexport const rotateExits = (exits: Exits, rota: number) => exits.map(exit => (exit + rota) % 4) as Exits;\n\nexport const dirVectors: Record<Direction, Position> = {\n  [Direction.North]: {x: 0, y: -1},\n  [Direction.East]: {x: 1, y: 0},\n  [Direction.South]: {x: 0, y: 1},\n  [Direction.West]: {x: -1, y: 0},\n};\n","export const rndInt = (max: number): number => Math.floor(Math.random() * max);\n\nexport const rndArrayElement = <T>(array: T[]): T => array[rndInt(array.length)];\n\nexport const wrap = (number: number, max: number): number => (max === 0 ? number : ((number % max) + max) % max);\n","import {Direction, rotateExits, Map, Exits} from './position';\n\nconst roundC = 0.2761;\nconst corners = {\n  [Direction.North]: {x: 0.5, y: 0, cx: 0.5, cy: roundC},\n  [Direction.East]: {x: 1, y: 0.5, cx: 1 - roundC, cy: 0.5},\n  [Direction.South]: {x: 0.5, y: 1, cx: 0.5, cy: 1 - roundC},\n  [Direction.West]: {x: 0, y: 0.5, cx: roundC, cy: 0.5},\n};\n\nexport const colors = ['#d10', '#12e', '#080', '#eb0'];\n\nexport const exitsToPath = (exits: Exits): string => {\n  const c1 = corners[exits[0]];\n  const c2 = corners[exits[1]];\n  return `M ${c1.x} ${c1.y} C ${c1.cx} ${c1.cy}, ${c2.cx} ${c2.cy}, ${c2.x} ${c2.y}`;\n};\n\n\nconst strokePathString = (color: number, exits: Exits) => `<path stroke=\"${colors[color]}\" d=\"${exitsToPath(exits)}\"/>`;\n\nexport const svgMap = (map: Map, width: number, height: number, size = 64) => {\n  const curves = map.map(({strokes, rotation, x, y}) => {\n    const svgStrokes = strokes.map(({color, exits}) => strokePathString(color, rotateExits(exits, rotation)));\n    return `<g transform=\"translate(${x} ${y})\">${svgStrokes.join('')}</g>`;\n  });\n  return `<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"${size * width}\" height=\"${size *\n    height}\" viewBox=\"0 0 ${width} ${height}\" stroke-width=\".5\"><style>path { mix-blend-mode: screen;}</style>${curves.join(\n    ''\n  )}</svg>`;\n};\n","/** @jsxImportSource @emotion/react */\n\nimport {Tile} from './position';\nimport {MouseEvent} from 'react';\nimport {colors, exitsToPath} from './tileRenderer';\n\ninterface TileProps {\n  onClick: (event: MouseEvent<HTMLOrSVGElement>) => void;\n  tile: Tile;\n}\n\nconst tileStyle = {\n  backgroundSize: 'cover',\n  strokeWidth: 0.5,\n  '& path': {\n    'mix-blend-mode': 'screen',\n  },\n  '& g': {\n    transition: 'all .2s ease-in-out',\n  },\n};\n\nexport default ({tile: {x, y, strokes, rotation}, onClick}: TileProps) => {\n  return (\n    <svg x={x} y={y} css={tileStyle} onClick={onClick} pointerEvents=\"all\">\n      <g transform={`rotate(${rotation * 90} .5 .5)`}>\n        {strokes.map(({color, exits}) => (\n          <path stroke={colors[color]} d={exitsToPath(exits)} />\n        ))}\n        <rect x=\"0\" y=\"0\" width=\"100%\" height=\"100%\" fill=\"none\" />\n      </g>\n    </svg>\n  );\n};\n","/** @jsxImportSource @emotion/react */\n\nimport Tile from './Tile';\nimport {Map, Tile as TileType} from './position';\n\ninterface BoardProps {\n  map: Map;\n  width: number;\n  height: number;\n  rotateTile: (tile: TileType) => void;\n  tileSize: number;\n  isSolved?: boolean;\n}\n\nconst boardStyle = (width: number, height: number, tileSize: number, isSolved: boolean) => ({\n  display: 'block',\n  gridTemplateColumns: `repeat(${width}, 1fr)`,\n  gridTemplateRows: `repeat(${height}, 1fr)`,\n  width: tileSize * width,\n  height: tileSize * height,\n  background: isSolved ? 'rgba(0,0,0,.8)' : 'rgba(0,0,0,0)',\n  padding: isSolved ? 32 : 0,\n  transform: isSolved ? 'scale(.75)' : 'scale(1)',\n  borderRadius: isSolved ? 64 : 0,\n  opacity: isSolved ? 1 : 0.8,\n  transition: 'all 1s ease-in-out',\n});\n\nexport default ({map, width, height, rotateTile, tileSize, isSolved = false}: BoardProps) => {\n  return (\n    <svg viewBox={`0 0 ${width} ${height}`} css={boardStyle(width, height, tileSize, isSolved)}>\n      {map.map(tile => (\n        <Tile tile={tile} onClick={() => !isSolved && rotateTile(tile)} key={`${tile.x},${tile.y}`} />\n      ))}\n    </svg>\n  );\n};\n","import {\n  Position,\n  addPositionsWrap,\n  isSame,\n  getPosition,\n  getExits,\n  dirVectors,\n  rotateExits,\n  PosStroke,\n  Map,\n} from './position';\nimport {rndInt, rndArrayElement} from './util';\n\nconst mapPosToPosStroke = (posMap: Position[], color: number) =>\n  posMap.map(\n    (point, index): PosStroke => {\n      const prev = index === 0 ? posMap[posMap.length - 1] : posMap[index - 1];\n      const next = index === posMap.length - 1 ? posMap[0] : posMap[index + 1];\n      const exits = getExits(point, prev, next);\n      return {x: point.x, y: point.y, stroke: {exits, color}};\n    }\n  );\n\nconst makePath = (width: number, height: number, color: number): PosStroke[] => {\n  let isDone = false;\n  let steps: Position[] = [];\n  const minLength = Math.min(width + height, width * height - 1);\n\n  while (!isDone) {\n    let isPossible = true;\n    let currentStep = {x: rndInt(width), y: rndInt(height)};\n    steps = [currentStep];\n\n    while (!isDone && isPossible) {\n      const candidates = [[-1, 0], [1, 0], [0, -1], [0, 1]]\n        .map(([x, y]) => addPositionsWrap(currentStep, {x, y}, width, height))\n        .filter(pos => steps.every((step, index) => (index === 0 && steps.length > minLength) || !isSame(step, pos)));\n      if (candidates.length > 0) {\n        currentStep = rndArrayElement(candidates);\n        if (isSame(steps[0], currentStep)) {\n          isDone = true;\n        } else {\n          steps.push(currentStep);\n        }\n      } else {\n        isPossible = false;\n      }\n    }\n  }\n  return mapPosToPosStroke(steps, color);\n};\n\nexport const makeMap = (width: number, height: number, randomRotate = false): Map => {\n  const paths = [\n    ...makePath(width, height, 0),\n    ...makePath(width, height, 1),\n    ...makePath(width, height, 2),\n    ...makePath(width, height, 3),\n  ];\n  return Array.from({length: width * height}, (_, index) => {\n    const pos = getPosition(index, width);\n    const strokes = paths.filter(path => isSame(path, pos)).map(({stroke}) => stroke);\n    return {...pos, strokes, rotation: randomRotate ? Math.floor(Math.random() * 16) : 0};\n  });\n};\n\nexport const makeDemoMap = (): Map => {\n  const pathPosA = [\n    {x: 0, y: 0},\n    {x: 1, y: 0},\n    {x: 2, y: 0},\n    {x: 3, y: 0},\n    {x: 3, y: 1},\n    {x: 2, y: 1},\n    {x: 1, y: 1},\n    {x: 0, y: 1},\n  ];\n  const pathPosB = [\n    {x: 1, y: 0},\n    {x: 2, y: 0},\n    {x: 2, y: 1},\n    {x: 2, y: 2},\n    {x: 2, y: 3},\n    {x: 1, y: 3},\n    {x: 1, y: 2},\n    {x: 1, y: 1},\n  ];\n  const paths = [...mapPosToPosStroke(pathPosA, rndInt(4)), ...mapPosToPosStroke(pathPosB, rndInt(4))];\n  return Array.from({length: 16}, (_, index) => {\n    const pos = getPosition(index, 4);\n    const strokes = paths.filter(path => isSame(path, pos)).map(({stroke}) => stroke);\n    return {...pos, strokes, rotation: 0};\n  });\n};\n\nexport const checkSolved = (map: Map, width: number, height: number) => {\n  return map.every(({x, y, rotation, strokes}) =>\n    strokes.every(({color, exits}) => {\n      const rotExits = rotateExits(exits, rotation);\n      return rotExits.every(exit => {\n        const pos = addPositionsWrap({x, y}, dirVectors[exit], width, height);\n        const neighbor = map.find(other => isSame(pos, other))!;\n        return neighbor.strokes.some(nbStroke => {\n          if (nbStroke.color === color) {\n            const nbExitOpposites = rotateExits(nbStroke.exits, neighbor.rotation + 2);\n            return nbExitOpposites.includes(exit);\n          }\n          return false;\n        });\n      });\n    })\n  );\n};\n","import React, {useReducer, useEffect} from 'react';\nimport {makeMap, checkSolved, makeDemoMap} from './map';\nimport {Map, Tile} from './position';\nimport {rndArrayElement} from './util';\n\ninterface State {\n  width: number;\n  height: number;\n  introMap: Map;\n  map: Map;\n  isSolved: boolean;\n  isStarted: boolean;\n  tileSize: number;\n  showBackground: boolean;\n}\n\ninterface Context extends State {\n  start: (width: number, height: number) => void;\n  rotateTile: (tile: Tile) => void;\n  reset: () => void;\n}\n\ntype Action =\n  | {type: 'start'; payload: {width: number; height: number}}\n  | {type: 'rotate'; payload: Tile}\n  | {type: 'reset'}\n  | {type: 'showBackground'}\n  | {type: 'rotateDemo'};\n\nconst defaultState: State = {\n  width: 4,\n  height: 4,\n  introMap: makeDemoMap(),\n  map: makeMap(4, 4, true),\n  isSolved: false,\n  isStarted: false,\n  tileSize: 50,\n  showBackground: false,\n};\n\nconst defaultContext = {\n  ...defaultState,\n  start: () => {},\n  rotateTile: () => {},\n  reset: () => {},\n};\n\nexport const GameContext = React.createContext<Context>(defaultContext);\n\nconst gameReducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case 'start': {\n      const {width, height} = action.payload;\n      const totalSize = Math.min(document.body.offsetHeight, document.body.offsetWidth, 532) - 32;\n      const tileSize = Math.floor(totalSize / (Math.max(width, height) * 4)) * 4;\n      return {\n        ...state,\n        isSolved: false,\n        width,\n        height,\n        map: makeMap(width, height, true),\n        isStarted: true,\n        tileSize,\n      };\n    }\n    case 'rotate': {\n      const map = state.map.map(tile => (tile === action.payload ? {...tile, rotation: tile.rotation + 1} : tile));\n      const isSolved = state.isStarted && checkSolved(map, state.width, state.width);\n      return {...state, map, isSolved};\n    }\n    case 'reset': {\n      return {\n        ...state,\n        introMap: makeDemoMap(),\n        isStarted: false,\n        showBackground: false,\n      };\n    }\n    case 'showBackground': {\n      return {\n        ...state,\n        showBackground: true,\n      };\n    }\n    case 'rotateDemo': {\n      const randomTile = rndArrayElement(state.introMap);\n      const introMap = state.introMap.map(tile =>\n        tile === randomTile ? {...tile, rotation: tile.rotation + 1} : tile\n      );\n      return {...state, introMap};\n    }\n    default: {\n      return state;\n    }\n  }\n};\n\nexport default ({children}: {children: React.ReactNode}) => {\n  const [state, dispatch] = useReducer(gameReducer, defaultState);\n  const start = (width: number, height: number) => dispatch({type: 'start', payload: {width, height}});\n  const rotateTile = (tile: Tile) => dispatch({type: 'rotate', payload: tile});\n  const reset = () => dispatch({type: 'reset'});\n  const {width, height, introMap, map, isSolved, isStarted, tileSize, showBackground} = state;\n  useEffect(() => {\n    let id: number;\n    if (isSolved) {\n      id = window.setTimeout(() => {\n        dispatch({type: 'showBackground'});\n      }, 1000);\n    }\n    return () => {\n      clearTimeout(id);\n    };\n  }, [isSolved]);\n  useEffect(() => {\n    let id: number;\n    if (!isStarted) {\n      id = window.setInterval(() => {\n        dispatch({type: 'rotateDemo'});\n      }, 500);\n    }\n    return () => {\n      clearInterval(id);\n    };\n  }, [isStarted]);\n\n  return (\n    <GameContext.Provider\n      value={{\n        width,\n        height,\n        isSolved,\n        introMap,\n        map,\n        start,\n        rotateTile,\n        reset,\n        isStarted,\n        tileSize,\n        showBackground,\n      }}\n    >\n      {children}\n    </GameContext.Provider>\n  );\n};\n","/** @jsxImportSource @emotion/react */\n\nimport {css} from '@emotion/react';\nimport React from 'react';\nimport {useContext} from 'react';\nimport {GameContext} from './GameProvider';\n\nconst containerStyle = css({\n  backgroundColor: 'rgba(255,255,255,.5)',\n  maxWidth: 160,\n  display: 'flex',\n  flexDirection: 'row',\n  flexWrap: 'wrap',\n  justifyContent: 'center',\n  alignItems: 'center',\n  padding: '8px 0',\n  borderRadius: 4,\n});\n\nconst buttonStyle = css({\n  // border: '1px solid #dde',\n  border: 'none',\n  padding: '8px',\n  fontWeight: 500,\n  fontSize: '14px',\n  backgroundColor: '#dde',\n  margin: '4px',\n  color: '#667',\n  borderRadius: 4,\n  boxShadow: '1px 1px 0 #eef inset, -1px -1px 0 #ccd inset',\n  cursor: 'pointer',\n  width: 64,\n  '&:hover': {\n    backgroundColor: '#eef',\n  },\n});\n\nconst sizes = Array.from({length: 8}, (_, index) => ({width: index + 3, height: index + 3}));\n\nexport default (props: React.Props<HTMLDivElement>) => {\n  const {start} = useContext(GameContext);\n  return (\n    <React.Fragment>\n      <div css={containerStyle}>\n        {sizes.map(({width, height}) => {\n          const key = `${width}×${height}`;\n          return (\n            <button key={key} css={buttonStyle} onClick={() => start(width, height)}>\n              {key}\n            </button>\n          );\n        })}\n      </div>\n    </React.Fragment>\n  );\n};\n","import {css} from '@emotion/react';\n\nexport const scaleInTransition = css`\n  &.scaleIn-enter {\n    opacity: 0;\n    transform: scale(0.8);\n  }\n  &.scaleIn-enter-active {\n    opacity: 1;\n    transform: scale(1);\n    transition: all 300ms;\n  }\n  &.scaleIn-exit {\n    opacity: 1;\n    transform: scale(1);\n  }\n  &.scaleIn-exit-active {\n    opacity: 0;\n    transform: scale(1.2);\n    transition: all 300ms;\n  }\n`;\n\n\n","/** @jsxImportSource @emotion/react */\n\nimport {keyframes, Interpolation, Theme} from '@emotion/react';\nimport {useContext} from 'react';\nimport {GameContext} from './GameProvider';\nimport {svgMap} from './tileRenderer';\n\nexport const fadeInTransition = {};\n\nconst moveXAni = (size: number) =>\n  keyframes({\n    '0%': {\n      backgroundPositionX: '50%',\n    },\n    '50%': {\n      backgroundPositionX: `calc(50% - ${size / 2}px)`,\n    },\n    '100%': {\n      backgroundPositionX: '50%',\n    },\n  });\n\nconst moveYAni = (size: number) =>\n  keyframes({\n    '0%': {\n      backgroundPositionY: '50%',\n    },\n    '100%': {\n      backgroundPositionY: `calc(50% - ${size}px)`,\n    },\n  });\n\nconst solvedStyle = (size: number): Interpolation<Theme> => ({\n  position: 'absolute',\n  top: 0,\n  left: 0,\n  width: '100vw',\n  height: '100vh',\n  backgroundPosition: 'center',\n  clipPath: 'circle(100%)',\n  opacity: 0.3,\n  animation: `${moveXAni(size)} 5s ease-in-out infinite, \n                ${moveYAni(size)} 5s linear infinite`,\n  '&.fadeIn-enter': {\n    opacity: 0,\n  },\n  '&.fadeIn-enter-active': {\n    opacity: 0.3,\n    transition: 'opacity 1.5s .5s',\n  },\n  '&.fadeIn-exit': {\n    opacity: 0.3,\n  },\n  '&.fadeIn-exit-active': {\n    opacity: 0,\n    transition: 'opacity .3s',\n  },\n});\n\nconst size = 64;\n\nexport default (props: React.ClassAttributes<HTMLDivElement>) => {\n  const {width, height, map} = useContext(GameContext);\n  const rendered = svgMap(map, width, height, size * 2);\n  const bg = `data:image/svg+xml;utf8,${rendered.replace(/#/g, '%23')}`;\n  return (\n    <div\n      css={solvedStyle(size * width)}\n      style={{backgroundSize: `${size * width}px`, backgroundImage: `url('${bg}')`}}\n      {...props}\n    />\n  );\n};\n","/** @jsxImportSource @emotion/react */\n\nimport {css} from '@emotion/react';\nimport React from 'react';\n\nconst style = css({\n  position: 'absolute',\n  width: '100vw',\n  height: '100vh',\n  display: 'flex',\n  flexDirection: 'column',\n  justifyContent: 'center',\n  alignItems: 'center',\n});\nexport default (props: React.Props<HTMLDivElement>) => <div css={style} {...props} />;\n","/** @jsxImportSource @emotion/react */\n\nimport {css, keyframes} from '@emotion/react';\nimport React, {useRef, useContext} from 'react';\nimport {rndArrayElement} from './util';\nimport {GameContext} from './GameProvider';\n\nconst style = (boardSize: number) =>\n  css({\n    position: 'relative',\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    fontSize: 100,\n    cursor: 'pointer',\n    marginTop: boardSize / -8,\n    animation: `${glow} 1s ease-in-out alternate infinite`,\n    '&.growIn-enter': {\n      fontSize: 0,\n      marginTop: 0,\n    },\n    '&.growIn-enter-active': {\n      fontSize: 100,\n      marginTop: boardSize / -8,\n      transition: 'font-size .5s ease-in-out, margin-top .5s ease-in-out',\n    },\n  });\n\nconst glow = keyframes({\n  '0%': {\n    textShadow: '0 0 0px rgba(255,255,255,.6)',\n  },\n  '100%': {\n    textShadow: '0 0 9px rgba(255,255,255,.6)',\n  },\n});\nconst animals = Array.from('🐶🐱🐭🐹🐰🦊🐻🐼🐨🐯🦁🐮🐷🐸🐵');\nexport default (props: React.HTMLAttributes<HTMLDivElement>) => {\n  const animal = useRef(rndArrayElement(animals));\n  const {height, tileSize} = useContext(GameContext);\n  return (\n    <div css={style(height * tileSize)} {...props}>\n      {animal.current}\n    </div>\n  );\n};\n","/** @jsxImportSource @emotion/react */\n\nimport React, {useContext} from 'react';\nimport {CSSTransition} from 'react-transition-group';\nimport Board from './Board';\nimport LevelSelect from './LevelSelect';\nimport {scaleInTransition} from './transitionStyles';\nimport {GameContext} from './GameProvider';\nimport SolveBackground from './SolveBackground';\nimport FullScreenCenter from './FullScreenCenter';\nimport Finish from './Finish';\n\nexport default () => {\n  const {isSolved, isStarted, introMap, map, rotateTile, width, height, reset, tileSize, showBackground} = useContext(\n    GameContext\n  );\n  return (\n    <React.Fragment>\n      <CSSTransition in={showBackground} timeout={{enter: 2000, exit: 300}} unmountOnExit classNames=\"fadeIn\">\n        <SolveBackground />\n      </CSSTransition>\n      <CSSTransition in={isStarted} timeout={300} unmountOnExit mountOnEnter classNames=\"scaleIn\">\n        <FullScreenCenter css={scaleInTransition}>\n          <Board\n            map={map}\n            rotateTile={rotateTile}\n            width={width}\n            height={height}\n            tileSize={tileSize}\n            isSolved={isSolved}\n          />\n          <CSSTransition in={isSolved} timeout={500} unmountOnExit classNames=\"growIn\">\n            <Finish onClick={reset}>reset</Finish>\n          </CSSTransition>\n        </FullScreenCenter>\n      </CSSTransition>\n      <CSSTransition in={!isStarted} timeout={300} unmountOnExit classNames=\"scaleIn\">\n        <FullScreenCenter css={scaleInTransition}>\n          <Board map={introMap} rotateTile={rotateTile} width={4} height={4} tileSize={50} />\n          <LevelSelect css={scaleInTransition} />\n        </FullScreenCenter>\n      </CSSTransition>\n    </React.Fragment>\n  );\n};\n","import {css, Global} from '@emotion/react';\nimport React from 'react';\nimport Game from './Game';\nimport GameProvider from './GameProvider';\n\nconst globalStyle = css({\n  body: {\n    margin: 0,\n    backgroundImage: `\n      linear-gradient(rgba(255,255,255,.05) 0, rgba(255,255,255,0) 3px,rgba(0,0,0,0) 30px,rgba(0,0,0,.05) 100%), \n      linear-gradient(90deg, rgba(255,255,255,.05) 0, rgba(255,255,255,0) 3px,rgba(0,0,0,0) 30px,rgba(0,0,0,.05) 100%),\n      linear-gradient(135deg, #58484d 0%,#000008 100%)\n      `,\n    backgroundSize: 'auto 4px, 4px auto, auto',\n    backgroundPosition: 'center',\n    minHeight: '100vh',\n    overflow: 'hidden',\n  },\n});\n\nexport default () => {\n  return (\n    <>\n      <Global styles={globalStyle} />\n      <GameProvider>\n        <Game />\n      </GameProvider>\n    </>\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}